package dbf.exploitr.dropbox_fixer;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static dbf.exploitr.dropbox_fixer.MainController.fails;

public class MainController {

    public static ArrayList<String> fails;

    @FXML
    public TextArea console_;

    @FXML
    private TextField location_field;

    @FXML
    protected void onHelloButtonClick() {
        fails = new ArrayList<>();
        new execThread(location_field.getText(), new listener() {
            @Override
            public void onDone(boolean state) {
                console_.appendText("DONE! WEEEEEEEEEEEEEEEEE\n");
            }

            @Override
            public void updateConsole(String text) {
                console_.appendText(text);
            }
        }).start();
    }

    public void onExitButtonClick(ActionEvent actionEvent) {
        System.exit(0);
    }
}

class execThread extends Thread {
    listener local;
    String loc;

    public execThread(String loc, listener listener) {
        local = listener;
        this.loc = loc;
    }

    @Override
    public void run() {
        int prog = 1;
        long time = System.currentTimeMillis();

        File file = new File(loc);
        if (!file.canRead() || !file.canWrite() || file.isFile()) {
            local.onDone(false);
            return;
        }
        Path path = Paths.get(loc);
        try {
            List<Path> directories =
                    Files.walk(path)
                            .collect(Collectors.toList());
            local.updateConsole("Collected all directories\nFiltering by \"build\" \n");
            for (Path lp : directories) {
                String pathName = lp.toString();

                if (!pathName.contains("\\build\\")) {
                    if ((pathName.contains("conflicted") || pathName.contains("conflicted copy"))) {
                        String conf = pathName.substring(0, pathName.indexOf('(') - 1) +
                                pathName.substring(pathName.indexOf('.'));

                        File keep = new File(pathName);

                        File delete = new File(conf);
                        if (delete.exists() && delete.isFile()) {
                            boolean deleted = delete.delete();
                            if (!deleted)
                                fails.add(pathName);
                        }
                        boolean rename = keep.renameTo(delete);
                        if (!rename)
                            fails.add(pathName);
                    }
                    prog++;
                }
                if (System.currentTimeMillis() - time > 50) {
                    time = System.currentTimeMillis();
                    local.updateConsole("" + prog + " of " + directories.size() + " \n");
                }
            }
            local.updateConsole("Failed >> " + (fails.size() == 0 ? "none" : fails) + "\n");
            local.onDone(true);
        } catch (Exception e) {
            e.printStackTrace();
            local.onDone(false);
            return;
        }
        super.run();
    }
}

interface listener {
    void onDone(boolean state);

    void updateConsole(String text);
}